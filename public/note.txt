import React from "react";
import { useQuery } from "@tanstack/react-query";
import { Link } from "react-router-dom";
import Loading from "../../../components/Loading";
import useAxiosPublic from "../../../hooks/useAxiosPublic";
import DynamicTitle from "../../../components/DynamicTitle";
import SectionHeading from "../../../components/SectionHeading";

const AllClass = () => {
  const axiosPublic = useAxiosPublic();

  // Fetch all classes
  const {
    isLoading: isClassLoading,
    isError: isClassError,
    error: classError,
    data: classData = [],
  } = useQuery({
    queryKey: ["bookedClasses"],
    queryFn: async () => {
      const { data } = await axiosPublic.get("/class");
      return data || [];
    },
  });

  // Fetch trainers for all classes
  const {
    isLoading: isTrainerLoading,
    isError: isTrainerError,
    error: trainerError,
    data: allTrainerData = [],
  } = useQuery({
    queryKey: ["bookedTrainersForAllClasses"],
    queryFn: async () => {
      if (!classData.length) return [];
      const trainerRequests = classData.map(async (classItem) => {
        try {
          const { data } = await axiosPublic.get(
            `/classtrainer/${encodeURIComponent(classItem.className)}`
          );
          return { className: classItem.className, trainers: data || [] };
        } catch (err) {
          console.error(`Error fetching trainers for ${classItem.className}:`, err);
          return { className: classItem.className, trainers: [] };
        }
      });
      return Promise.all(trainerRequests);
    },
    enabled: !!classData.length,
  });

  // Show loading state
  if (isClassLoading || isTrainerLoading) {
    return <Loading />;
  }

  // Handle errors
  if (isClassError || isTrainerError) {
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-red-500">
          Error: {classError?.message || trainerError?.message || "Something went wrong"}
        </p>
      </div>
    );
  }

  // Handle empty state
  if (!classData.length) {
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-white">No classes to show at this moment</p>
      </div>
    );
  }

  return (
    <>
    <DynamicTitle title='Fitlogix | all classes' />
    <SectionHeading heading='All classes' />
      <div className="container mx-auto">
      <div>
    
      <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3  p-4">
        {classData.map((classItem) => {
          const classTrainers = allTrainerData.find(
            (trainerData) => trainerData.className === classItem.className
          );

          return (
            <div
              key={classItem._id}
              className="rounded-2xl border border-deepOrange shadow-md bg-[#3c3c3c] p-4 w-full mb-8 max-w-sm mx-auto md:max-w-md "
            >
              {/* Class Image */}
              <img
                src={classItem.image || "https://via.placeholder.com/400x300"}
                alt={`${classItem.className} Image`}
                className="rounded-t-2xl w-full h-48 object-cover"
              />
              <div className="p-4">
                {/* Class Name */}
                <h2 className="text-xl font-bold text-white mb-2">
                  {classItem.className}
                </h2>

                {/* Class Description */}
                <p className="text-white mb-4">{classItem.details}</p>

                {/* Trainer Avatars */}
                <div className="flex items-center space-x-2">
                  {classTrainers?.trainers?.length ? (
                    classTrainers.trainers.map((trainer) => (
                      <Link to={`/trainerdetails/${trainer._id}`} key={trainer._id}>
                        <img
                          src={trainer.image}
                          alt={trainer.name}
                          className="w-10 h-10 rounded-full border border-gray-200"
                        />
                      </Link>
                    ))
                  ) : (
                    <p className="text-gray-500 text-sm">No trainers available</p>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
      </div>

    </>
    
  );
};

export default AllClass;




app.get("/class",async(req,res)=>{
  const result=await classCollection.find().toArray();
  res.send(result)
})
